### YamlMime:Tutorial
title: Explorar o C# 6 – Tutorial interativo do C#
metadata:
  title: Explorar o C# 6 – experimente os novos recursos do C# 6 interativamente usando seu navegador
  description: Neste tutorial, você usará seu navegador para explorar o C# 6 interativamente. Você explorará as novas expressões que podem ser usadas com C# 6 que permitem um código mais conciso e legível.
  audience: Developer
  level: intermediate
  ms.date: 12/11/2018
  ms.topic: interactive-tutorial
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 1dfd9dba60f21cf80e53ac1e9735859cb567797d
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88268095"
items:
- durationInMinutes: 1
  content: >
    Este tutorial permite que você explore o C# 6 interativamente usando seu navegador para escrever em C# e ver os resultados do build e da execução do código. Ele contém uma série de lições que modificam as antigas práticas de C# para usar os recursos mais recentes e mais concisos do C# 6. O restante deste artigo oferece uma visão geral de cada um desses recursos, com um link para explorá-los.
- title: As propriedades automáticas somente leitura permitem tipos somente leitura
  durationInMinutes: 2
  content: "Duas melhorias na sintaxe de propriedade automática facilitam o uso das propriedades automáticas em mais lugares: propriedades automáticas somente leitura e inicializadores de propriedade automática. Considere este programa pequeno:\n\n[!code-csharp[Starter](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-starter/Program.cs)]  \n\n    \n Entre no modo de foco e copie o código anterior na janela do C# Interativo. Em seguida, selecione *executar* para ver o que o código faz. `AllCaps` tem o efeito colateral indesejado de modificar os valores de propriedade retornando também a cadeia de caracteres em maiúsculas. A intenção do autor da classe `Person` era que as cadeias de caracteres de `FirstName` e `LastName` fossem somente leitura. Com o C# 6, você pode tornar essa intenção clara. Remova o `private set` de ambas as propriedades para criar uma propriedade automática somente leitura. Selecione *executar* para ver que o compilador apresenta os dois locais em que `FirstName` as `LastName` Propriedades e são alteradas quando elas não deveriam ter sido. Você pode alterar o método `AllCaps` no código a seguir para corrigir o erro do compilador:\n\n```csharp\npublic string AllCaps()\n{\n  return ToString().ToUpper();\n}\n```\n\nUsando essa nova sintaxe, o compilador garante que as propriedades sejam imutáveis.\n"
- title: Inicializar campos de suporte para propriedades automáticas
  durationInMinutes: 1
  content: "A nova sintaxe em C# 6 permite que você use inicializadores para propriedades automáticas. Isso se torna mais importante à medida que surgem novas funcionalidades das classes. Adicione uma propriedade de nome do meio e um novo construtor que use três cadeias de caracteres para a classe `Person`:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#MiddleName)]  \n\nA atribuição na propriedade `MiddleName` é um inicializador. Ele inicializa o campo de suporte gerado pelo compilador para o nome do meio.\n"
- title: Membros aptos para expressão
  durationInMinutes: 2
  content: >
    Os membros aptos para expressão fornecem uma sintaxe leve para métodos leves. A classe `Person` tem dois ótimos candidatos. Examine a declaração de `ToString`:


    ```csharp

    public override string ToString()

    {
        return FirstName + " " + LastName;
    }

    ```


    Substitua a declaração de `ToString` pelo código a seguir:


    ```csharp

    public override string ToString() => FirstName + " " + LastName;

    ```


    Repita isso com o método `AllCaps`. Essa é uma pequena melhoria, mas quando usada com sabedoria, ela cria um código muito mais legível, principalmente para DTOs (Objetos de Transferência de Dados) e outros tipos com comportamento mínimo.
- title: Importando uma única classe
  durationInMinutes: 2
  content: "Se você usar métodos estáticos de uma classe repetidamente em todo o código, a inclusão do nome de classe em todos os momentos obscurecerá o significado do código. No momento, a classe `Person` importa o namespace `System`, mesmo que apenas <xref:System.Console?displayProperty=nameWithType> seja usado. Modifique a instrução `using` da seguinte maneira:\n\n[!code-csharp[MiddleName](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#UsingStatic)]  \n\nA `static using` instrução se torna mais útil em programas maiores que fazem uso extensivo de uma única classe com muitos métodos estáticos, como a [`string`](xref:System.String) classe ou a <xref:System.Math?displayProperty=nameWithType> classe.\n"
- title: Um formato de cadeia de caracteres melhor
  durationInMinutes: 2
  content: "O C# 6 contém uma nova sintaxe para compor cadeias de caracteres usando expressões inseridas e de cadeia de caracteres que são avaliadas para produzir outros valores de cadeia de caracteres. Você pode alterar os métodos `ToString` e `AllCaps` para usar esta sintaxe:\n\n[!code-csharp[StringInterpolation](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#StringInterpolation)]  \n\nEm vez de argumentos posicionais entre o `{` e `}`, você escreve expressões em C# diretamente. Você pode fazer o mesmo no método `Main`. Substitua o código existente pelo seguinte:\n\n[!code-csharp[InterpolationMain](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#InterpolationMain)]  \n\nVocê não está limitado a uma única variável nessas expressões. Vamos começar com um novo exemplo e modificá-lo para demonstrar outras expressões que você pode usar com a interpolação de cadeia de caracteres. Cole o código a seguir na janela interativa no método `Main`:\n\n[!code-csharp[Phrases](../../../../samples/snippets/csharp/tutorials/exploration/csharp6-finished/Program.cs#Phrases)]  \nQue usa LINQ, portanto, você precisará adicionar a seguinte instrução using à parte superior da janela interativa:\n\n```csharp\nusing System.Linq;\n```\n\nVocê pode remover a variável local `average` e fazer esse cálculo como parte da expressão de cadeia de caracteres interpolada. Substitua as duas últimas linhas pelo seguinte:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average()}\");\n```\n\nAo executar o exemplo anterior, você veria que a saída de `Average` tem mais casas decimais do que o desejado. A sintaxe de interpolação de cadeia de caracteres dá suporte a todas as cadeias de caracteres de formato disponíveis que usam métodos de formatação anteriores. Especifique a cadeia de caracteres de formato entre chaves. Adicione um `:` seguido da expressão a ser formatada:\n\n```csharp\nWriteLine($\"The average word length is: {wordLength.Average():F2}\");\n```\n"
- title: Verificações de nulos rápidas e fáceis
  durationInMinutes: 2
  content: "O operador `?.` (condicional nulo) facilita a escrita da lógica que considera valores `null` perfeitamente, sem verificações extras `if`. Para explorar o recurso, comece copiando o código a seguir na janela interativa para testá-lo:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n      string s = null;\n      Console.WriteLine(s.Length);\n    }\n}\n```\n\nEle gera uma <xref:System.NullReferenceException> quando você executa o exemplo. Altere o operador de acesso de membro `.` para o **operador condicional nulo**:\n\n```csharp\nConsole.WriteLine(s?.Length);\n``` \n\nApós essa alteração, não haverá nenhuma saída. Isso ocorre porque o resultado de `s?.Length` é um `int?` quando o resultado de `s.Length` é um `int`. Neste exemplo, `s?.Length` é `null`. O `?.` retorna `null` quando o operando esquerdo é `null`. O `?.` operador retorna um tipo anulável para esse tipo, para tipos de valor e tipos de referência não anuláveis. Além de `?.` você pode usar `?[]` para acesso de matriz ou de indexador. Experimente o seguinte código na janela interativa:\n\n ```csharp\n char? c = s?[0];\n Console.WriteLine(c.HasValue);\n ```\n\n Vários operadores condicionais podem ser combinados em uma única expressão. Um operando esquerdo `null` produz um resultado `null`, tornando fácil evitar que cláusulas if aninhadas acessem membros de membros. Por exemplo, tente o seguinte código na janela interativa:\n\n ```csharp\n string s = null;\n bool? hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext();\n Console.WriteLine(hasMore.HasValue && hasMore.Value);\n ```\n\n O exemplo anterior pode ser simplificado usando o **operador de união nulo** para fornecer um valor padrão:\n\n ```csharp\n bool hasMore = s?.ToCharArray()?.GetEnumerator()?.MoveNext() ?? false;\n Console.WriteLine(hasMore);\n ```\n\n O **operador condicional nulo** ajuda a escrever um código que esclarece a lógica principal testando a presença de `null` perfeitamente.\n"
- title: Filtros de exceção
  durationInMinutes: 2
  content: "Os filtros de exceção permitem que você capture uma exceção com base em alguma condição. Um uso típico é criar um método de filtro que registre exceções em log, mas nunca trate essas exceções. Um filtro de exceção é uma expressão booliana que é `true` quando a cláusula `catch` deve ser executada e `false` quando a exceção não deve ser capturada pela cláusula `catch`. Experimente o seguinte código na janela interativa: ele registra o tipo de exceção e a mensagem no console. Ele retorna `false` , que indica que a exceção não pode ser tratada. Experimente o programa na janela interativa.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main()\n    {\n        try \n        {\n            string s = null;\n            Console.WriteLine(s.Length);\n\n        } catch (Exception e) when (LogException(e))\n        {\n        }\n        Console.WriteLine(\"Exception must have been handled\");\n    }\n\n    private static bool LogException(Exception e)\n    {\n        Console.WriteLine($\"\\tIn the log routine. Caught {e.GetType()}\");\n        Console.WriteLine($\"\\tMessage: {e.Message}\");\n        return false;\n    }\n}\n```\n\nVocê deverá ver a mensagem do método `LogException`, seguida pela mensagem de exceção padrão. Apenas para experimentar, altere a instrução `return false` para `return true` e execute isso novamente. Agora, a exceção é capturada e o programa é executado até a conclusão.\n\nAlém dos cenários de registro em log, os filtros de exceção podem ser mais úteis quando uma propriedade da exceção determina qual ação será tomada. Por exemplo, você pode examinar um <xref:System.AggregateException> para ver quais são as exceções independentes e executar alguma ação apropriada dependendo da exceção específica.\n"
- title: Usar nameof
  durationInMinutes: 2
  content: "O operador `nameof` retorna o nome de qualquer variável, um tipo ou um membro de um tipo. Experimente o seguinte código na janela interativa para ver como ele funciona:\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(nameof(System.String));\n        int j = 5;\n        Console.WriteLine(nameof(j));\n        List<string> names = new List<string>();\n        Console.WriteLine(nameof(names));\n    }\n}\n```\n\nA saída corresponde ao nome da variável ou ao tipo. Até mesmo quando você fornece o nome do tipo totalmente qualificado (como `System.String`) o operador `nameof` retorna o nome não qualificado. Esse recurso é mais útil quando você precisa converter um nome de parâmetro ou de propriedade em uma cadeia de caracteres. Os exemplos incluem capturar o nome de um argumento para gerar uma <xref:System.ArgumentNullException> ou <xref:System.ArgumentException> ou capturar o nome de uma propriedade alterada ao implementar <xref:System.ComponentModel.INotifyPropertyChanged>. \n"
- title: Sintaxe de nova inicialização de objeto
  durationInMinutes: 2
  content: "A sintaxe do inicializador de objeto agora dá suporte para inicializar *indexadores*, bem como propriedades e campos. Essa adição torna mais fácil inicializar dicionários e outros tipos. Comece com um dicionário. Execute o seguinte código na janela interativa:\n\n```csharp\nvar messages = new Dictionary<int, string>\n{\n    [404] = \"Page not Found\",\n    [302] = \"Page moved, but left a forwarding address.\",\n    [500] = \"The web server can't come out to play today.\"\n};\n\nConsole.WriteLine(messages[302]);\n```\n\nEssa sintaxe, que define um valor em um indexador, pode ser usada para qualquer tipo que tenha um acessador de conjunto acessível em um indexador.\n\nUma segunda alteração torna mais fácil habilitar a sintaxe do inicializador para tipos que representam sequências. Inicializadores de coleção podem ser usados em qualquer classe que implemente <xref:System.Collections.IEnumerable> e tenha um método `Add` acessível publicamente. Esse método `Add` agora pode ser um método de extensão. \n\nO exemplo a seguir mostra um cenário para essa sintaxe. Ele cria uma classe `Path` que implementa `IEnumerable<Point3D>` e tem um método para adicionar pontos que usa três argumentos. A classe `Extensions` cria o método `Add` adicional para adicionar um novo ponto de seus três componentes. Este exemplo atualmente não é executado interativamente devido a restrições no ambiente.\n\n```csharp\npublic class Path : IEnumerable<Point3D>\n{\n    private List<Point3D> points = new List<Point3D>();\n    public IEnumerator<Point3D> GetEnumerator() => points.GetEnumerator();\n    IEnumerator IEnumerable.GetEnumerator() => points.GetEnumerator();\n\n    public void Add(Point3D pt) => points.Add(pt);\n}\n\npublic static class Extensions\n{\n    public static void Add(this Path path, double x, double y, double z) => path.Add(new Point3D(x, y, z));\n}\n```\n"
- content: Você concluiu uma exploração dos novos recursos no C# 6. Agora experimente-os em seus aplicativos.
