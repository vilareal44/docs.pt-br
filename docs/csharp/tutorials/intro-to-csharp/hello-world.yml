### YamlMime:Tutorial
title: Tutorial interativo de C# Olá, Mundo – introdução ao C#
metadata:
  title: Tutorial interativo de C# Olá, Mundo – introdução ao C#
  description: Neste tutorial, você usará seu navegador para aprender C# interativamente. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  level: Beginner
  ms.date: 08/24/2018
  ms.topic: interactive-tutorial
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Números em C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 17d33b25867f75419a0e65ab0d75950bad13af57
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88267393"
items:
- durationInMinutes: 1
  content: >
    Este tutorial ensina C# de forma interativa, usando seu navegador para escrever em C# e ver os resultados da compilação e da execução de seu código. Ele contém uma série de lições que começam com um programa "Olá, Mundo". Estas lições ensinam os princípios básicos da linguagem C#.
- title: Executar seu primeiro programa em C#
  durationInMinutes: 2
  content: >
    Execute o seguinte código na janela interativa. Selecione o botão **entrar no modo de foco** . Em seguida, digite o seguinte bloco de código na janela interativa e selecione **executar**:


    ```csharp

    Console.WriteLine("Hello World!");

    ```


    Parabéns! Você executou seu primeiro programa em C#. É um programa simples que imprime a mensagem "Olá, Mundo!". Ele usou o método <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> para imprimir essa mensagem. `Console` é um tipo que representa a janela do console. `WriteLine` é um método do tipo `Console` que imprime uma linha de texto nesse console de texto.


    Vamos continuar e explorar mais. O restante desta lição explora como trabalhar com o tipo `string`, que representa o texto em C#. Como o tipo `Console`, o tipo `string` tem métodos. Os métodos `string` funcionam com texto.
- title: Declarar e usar variáveis
  durationInMinutes: 3
  content: >
    Seu primeiro programa imprimiu o `string` "Olá, Mundo!" na tela.


    > [!TIP]

    > À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.

    > Esse exercício ajudará você a conhecer a estrutura do código C#.


    Seu primeiro programa está limitado à impressão de uma mensagem. Você pode escrever programas mais úteis usando **variáveis**. Uma **variável** é um símbolo que você pode usar para executar o mesmo código com valores diferentes. Vamos testá-lo! Substitua o código que você escreveu na janela interativa pelo código a seguir:


    ```csharp

    string aFriend = "Bill";

    Console.WriteLine(aFriend);

    ```


    A primeira linha declara uma variável, `aFriend`, e atribui a ela um valor, "Conta". A segunda linha imprime o nome.


    Atribua valores diferentes para qualquer variável declarada. Altere o nome para um dos seus amigos. Adicione estas duas linhas na janela interativa, após o código que você já adicionou:


    ```csharp

    aFriend = "Maira";

    Console.WriteLine(aFriend);

    ```


    Observe que a mesma linha de código imprime duas mensagens diferentes, com base no valor armazenado na variável `aFriend`.


    Você também deve ter observado que a palavra "Olá" estava ausente nas duas últimas mensagens. Vamos corrigir isso agora.  Modifique as linhas que imprime a mensagem para o seguinte:


    ```csharp

    Console.WriteLine("Hello " + aFriend);

    ```


    Selecione **executar** novamente para ver os resultados.


    Você usou `+` para criar cadeias de caracteres com base em cadeias de caracteres de **variáveis** e de **constantes**. Há um modo melhor.

    Você pode colocar uma variável entre caracteres `{` e `}` para informar ao C# para substituir esse texto com o valor da variável.


    Isso é chamado de [Interpolação de cadeia de caracteres](../../language-reference/tokens/interpolated.md).


    Se adicionar um `$` antes da abertura de aspas da cadeia de caracteres, você poderá incluir variáveis, tais como `aFriend`, dentro da cadeia de caracteres, entre chaves. Experimente:



    ```csharp

    Console.WriteLine($"Hello {aFriend}");

    ```


    Selecione **executar** novamente para ver os resultados. Em vez de "Olá {aFriend}", a mensagem deve ser "Olá, Maira".
- title: Trabalhar com cadeias de caracteres
  durationInMinutes: 5
  content: >
    Sua última edição foi nossa primeira análise do que você pode fazer com cadeias de caracteres. Vamos explorar mais.


    Você não está limitado a uma única variável entre as chaves. Tente o seguinte:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Conforme explorar mais as cadeias de caracteres, você descobrirá que cadeias de caracteres são mais do que uma coleção de letras. Você pode encontrar o tamanho de uma cadeia de caracteres usando `Length`. `Length` é uma **propriedade** de uma cadeia de caracteres e retorna o número de caracteres na cadeia. Adicione o seguinte código na parte inferior da janela interativa:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > Este é um bom momento para explorar por conta própria. Você aprendeu que `Console.WriteLine()` escreve um texto na tela. Você aprendeu como declarar variáveis e concatenar cadeias de caracteres. Experimente com a janela interativa. A janela tem um recurso chamado **IntelliSense**, que faz sugestões sobre o que você pode fazer. Digite um `.` depois do `d` em `firstFriend`. Você verá uma lista de sugestões para propriedades e métodos que você pode usar.
- title: Faça mais com as cadeias de caractere
  durationInMinutes: 5
  content: >
    Você está usando um **método**, <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> , para imprimir mensagens. Um **método** é um bloco de código que implementa alguma ação. Ele tem um nome, portanto você pode acessá-lo.


    Suponha que suas cadeias de caracteres têm espaços à esquerda ou à direita que você não deseja exibir. Você deseja **cortar** os espaços das cadeias de caracteres.

    O método <xref:System.String.Trim%2A> e os métodos relacionados <xref:System.String.TrimStart%2A> e <xref:System.String.TrimEnd%2A> fazem isso funcionar. Você pode apenas usar esses métodos para remover espaços à esquerda e à direita. Experimente o código a seguir:


    ```csharp

    string greeting = "      Hello World!       ";

    Console.WriteLine($"[{greeting}]");


    string trimmedGreeting = greeting.TrimStart();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.TrimEnd();

    Console.WriteLine($"[{trimmedGreeting}]");


    trimmedGreeting = greeting.Trim();

    Console.WriteLine($"[{trimmedGreeting}]");

    ```


    Os colchetes `[` e `]` ajudar a visualizar o que o `Trim` e os `TrimStart` `TrimEnd` métodos fazem. Os colchetes mostram onde o espaço em branco começa e termina.


    Este exemplo reforça alguns conceitos importantes do trabalho com cadeias de caracteres. Os métodos que manipulam cadeias de caracteres retornam novos objetos de cadeia de caracteres, em vez de fazer modificações no local. Veja que cada chamada para qualquer um dos métodos `Trim` retorna uma nova cadeia de caracteres, mas não altera a mensagem original.


    Há outros métodos disponíveis para trabalhar com uma cadeia de caracteres. Por exemplo, você provavelmente já usou um comando de pesquisa e substituição em um editor ou processador de textos. O método <xref:System.String.Replace%2A> faz algo semelhante em uma cadeia de caracteres. Ele procura uma subcadeia de caracteres e a substitui por outro texto. O <xref:System.String.Replace%2A> método usa dois **parâmetros**. Essas são as cadeias de caracteres entre parênteses. A primeira cadeia de caracteres é o texto a ser pesquisado. A segunda cadeia de caracteres é o texto para substituição. Experimente. Adicione este código. Digite-o para ver as dicas conforme você começa a digitar `.Re` depois da variável `sayHello`:


    ```csharp

    string sayHello = "Hello World!";

    Console.WriteLine(sayHello);

    sayHello = sayHello.Replace("Hello", "Greetings");

    Console.WriteLine(sayHello);

    ```


    Outros dois métodos úteis colocam uma cadeia de caracteres TODA EM MAIÚSCULAS ou toda em minúsculas. Experimente o código a seguir. Digite-o para ver como o **IntelliSense** fornece dicas conforme você começa a digitar `To`:


    ```csharp

    Console.WriteLine(sayHello.ToUpper());

    Console.WriteLine(sayHello.ToLower());

    ```
- title: Pesquisar cadeias de caracteres
  durationInMinutes: 10
  content: >
    A outra parte de uma operação de *pesquisa e substituição* serve para localizar texto em uma cadeia de caracteres. Use o método <xref:System.String.Contains%2A> para pesquisar. Indica se uma cadeia de caracteres contém uma subcadeia de caracteres dentro dela. Experimente o seguinte código para explorar <xref:System.String.Contains%2A>:


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.Contains("goodbye"));

    Console.WriteLine(songLyrics.Contains("greetings"));

    ```


    O método <xref:System.String.Contains%2A> retorna um valor **booliano** que indica se a cadeia de caracteres que você estava procurando foi encontrada. Um **booliano** armazena um valor `true` ou `false`. Quando exibido como saída de texto, eles são capitalizados: `True` e `False` , respectivamente. Você saberá mais sobre valores **boolianos** em uma lição posterior.


    ***Desafio***


    Há dois métodos semelhantes, <xref:System.String.StartsWith%2A> e <xref:System.String.EndsWith%2A> que também procuram subcadeias de caracteres em uma cadeia de caracteres. Eles encontram uma subcadeia de caracteres no início ou no final da cadeia de caracteres. Tente modificar o exemplo anterior para usar <xref:System.String.StartsWith%2A> e <xref:System.String.EndsWith%2A> em vez de <xref:System.String.Contains%2A>. Procure "Você" ou "adeus" no início de uma cadeia de caracteres. Procure "olá" ou "adeus" no final de uma cadeia de caracteres.


    > [!NOTE]

    > Fique atento à pontuação quando testar o texto no final da cadeia de caracteres. Se a cadeia de caracteres terminar com um ponto, verifique se há uma cadeia de caracteres que termina com um ponto.


    Você deve obter `true` para iniciar com "You" e terminar com "hello" e false para iniciar ou terminar com "goodbye".
- title: Desafio concluído
  durationInMinutes: 3
  content: >
    Você conseguiu algo semelhante a isto?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```
- content: >-
    Você concluiu o tutorial de introdução à linguagem C# "Olá, C#". Você pode selecionar os **números no link C#** abaixo para iniciar o próximo tutorial interativo, ou pode visitar o [site do .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) para baixar o SDK do .NET Core, criar um projeto em seu computador e manter a codificação. A seção "próximas etapas" leva você de volta para esses tutoriais.


    Para ler mais sobre o tipo `string`:

    - Tópico do [Guia de Programação do C#](../../programming-guide/index.md) sobre [cadeias de caracteres](../../programming-guide/strings/index.md).

    - [Dicas de como trabalhar com cadeias de caracteres](../../how-to/index.md#working-with-strings).
