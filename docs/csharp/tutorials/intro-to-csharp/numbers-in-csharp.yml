### YamlMime:Tutorial
title: Manipular números de ponto flutuante e integrais em C#
metadata:
  title: Os números em C# – Tutorial de introdução ao C# Interativo
  description: Neste tutorial sobre tipos numéricos, você usará seu navegador para aprender C# interativamente. Você escreverá o código em C# e verá os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  ms.topic: interactive-tutorial
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Loops e branches em C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f9cfdf852546c30307f818418d7ff610b210d6f4
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88267925"
items:
- durationInMinutes: 1
  content: >
    Este tutorial ensina sobre os tipos numéricos em C# de forma interativa, usando seu navegador. Você escreverá C# e verá os resultados da compilação e execução do seu código. Ele contém uma série de lições que exploram números e operações matemáticas em C#. Estas lições ensinam os princípios básicos da linguagem C#.
- title: Explorar a matemática de inteiros
  durationInMinutes: 4
  content: >
    Execute o seguinte código na janela interativa. Selecione o botão **entrar no modo de foco** . Em seguida, digite o seguinte bloco de código na janela interativa e selecione **executar**:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Se você estiver trabalhando em seu ambiente, deverá seguir as instruções para a [versão local](numbers-in-csharp-local.md) em vez disso.


    Você viu uma das operações matemáticas fundamentais com números inteiros. O tipo `int` representa um **inteiro**, um número inteiro positivo ou negativo. Você usa o símbolo `+` para adição. Outras operações matemáticas comuns para inteiros incluem:


    - `-` para subtração

    - `*` para multiplicação

    - `/` para divisão


    > [!TIP]

    > Explorar por conta própria todo o tutorial interativo, modificando o código que você escreveu na janela interativa. Este tutorial fornece exemplos para teste a cada etapa.


    Comece explorando essas diferentes operações. Modifique a terceira linha para testar cada uma dessas operações. Depois de cada edição, selecione o botão **executar** .


    Subtração:


    ```csharp

    int c = a - b;

    ```


    Multiplicação:


    ```csharp

    int c = a * b;

    ```


    Divisão:


    ```csharp

    int c = a / b;

    ```


    Você também pode experimentar escrevendo várias operações matemáticas na mesma linha, se desejar.


    > [!TIP]

    > À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.

    > Esse exercício ajudará você a conhecer a estrutura do código C#.
- title: Explorar a ordem das operações
  durationInMinutes: 7
  content: >
    A linguagem C# define a precedência de operações matemáticas diferentes com regras consistentes às regras que você aprendeu em matemática.

    Multiplicação e divisão têm precedência sobre adição e subtração.

    Explore executando o seguinte código na janela interativa:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    A saída demonstra que a multiplicação é executada antes da adição.


    Você pode forçar uma ordem diferente de operações, adicionando parênteses para delimitar a operação, ou operações, que você quer realizar primeiro:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Explore mais, combinando várias operações diferentes. Substitua a quarta linha acima por algo parecido com isto:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Talvez você tenha observado um comportamento interessante com relação aos números inteiros. A divisão de inteiros sempre produz um resultado inteiro, mesmo quando você espera que o resultado inclua uma parte decimal ou fracionária.


    Se você não tiver visto esse comportamento, tente o seguinte código:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Selecione **executar** novamente para ver os resultados.
- title: Explorar a precisão de inteiros e limites
  durationInMinutes: 5
  content: >
    Esse último exemplo mostrou que uma divisão de inteiros trunca o resultado.

    Você pode obter o **restante** usando o operador **restante** , o `%` caractere:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    O tipo de inteiro C# difere do inteiros matemáticos de outra forma: o tipo `int` tem limites mínimo e máximo. Execute este código na janela interativa para ver esses limites:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Se um cálculo produzir um valor que excede esses limites, você terá uma condição de **estouro negativo** ou **estouro**. A resposta parece quebrar de um limite para o outro. Adicione estas duas linhas à janela interativa para ver um exemplo:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Observe que a resposta é muito próxima do mínimo inteiro (negativo). É o mesmo que `min + 2`.

    A operação de adição **estourou** os valores permitidos para números inteiros.

    A resposta é um número negativo muito grande, pois um estouro "envolve" do maior valor de inteiro possível para o menor.


    Há outros tipos numéricos com limites e precisão diferentes que você usaria quando o tipo `int` não atendesse às suas necessidades. Em seguida, vamos explorar esses tipos de números.
- title: Trabalhar com o tipo Double
  durationInMinutes: 5
  content: "O tipo numérico `double` representa um número de ponto flutuante de precisão dupla. Esses termos podem ser novidade para você. Um número de **ponto flutuante** é útil para representar números não integrais que podem ser muito grandes ou pequenos em magnitude. A **precisão dupla** é um termo relativo que descreve os números de dígitos binários usados para armazenar o valor. O número de **precisão dupla** tem duas vezes o número de dígitos binários como **uma única precisão**. Em computadores modernos, é mais comum usar precisão dupla que números de precisão única. Números de **precisão única** são declarados usando a `float` palavra-chave.\nVamos explorar. Experimente o seguinte código na janela interativa e veja o resultado:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nObserve que a resposta inclui a parte decimal do quociente. Experimente uma expressão ligeiramente mais complicada com duplos:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nO intervalo de um valor duplo é muito maior do que valores inteiros. Experimente o seguinte código na janela interativa:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nEsses valores são impressos em notação científica. O número à esquerda do `E` é o significando. O número à direita é o expoente, como uma potência de 10.\n\nAssim como os números decimais em matemática, os duplos em C# podem ter erros de arredondamento. Experimente esse código:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nVocê sabe que isso `0.3` é `3/10` e não exatamente o mesmo que `1/3` . Da mesma forma, `0.33` é `33/100` . Isso está mais próximo de `1/3` , mas ainda não é exato. \n\n***Desafio***\n\nTente outros cálculos com números grandes, números pequenos, multiplicação e divisão usando o `double` tipo.  Experimente cálculos mais complicados.\n"
- title: Trabalhar com tipos decimais
  durationInMinutes: 8
  content: >
    Você viu os tipos numéricos básicos em C#: inteiros e duplos.  Há um outro tipo para aprender: o `decimal` tipo. O tipo `decimal` tem um intervalo menor, mas precisão maior do que `double`. Vamos dar uma olhada:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Observe que o intervalo é menor do que o tipo `double`. Veja a precisão maior com o tipo decimal experimentando o código a seguir:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    O sufixo `M` nos números é o modo como você indica que uma constante deve usar o tipo `decimal`.


    Observe que o cálculo usando o tipo decimal tem mais dígitos à direita da vírgula decimal.


    O sufixo `M` nos números é o modo como você indica que uma constante deve usar o tipo `decimal`. Caso contrário, o compilador assume o `double` tipo.


    > [!NOTE]

    > A letra `M` foi escolhida como a letra mais visualmente distinta entre `double` as `decimal` palavras-chave e.


    ***Desafio***


    Agora que você viu os diferentes tipos numéricos, escreva um código que calcula a área de um círculo cujo raio é de 2,50 centímetros. Lembre-se de que a área de um círculo é o quadrado do raio multiplicado por PI. Uma dica: o .NET contém uma constante para PI, <xref:System.Math.PI?displayProperty=nameWithType>, que você pode usar para esse valor. <xref:System.Math.PI?displayProperty=nameWithType>, como todas as constantes declaradas no `System.Math` namespace, é um `double` valor. Por esse motivo, você deve usar `double` valores instead of `decimal` para esse desafio.


    Você deve obter uma resposta entre 19 e 20.
- title: Desafio concluído
  durationInMinutes: 1
  content: >
    Você conseguiu algo semelhante a isto?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Experimente outras fórmulas, se quiser.
- content: >-
    Você concluiu o tutorial interativo "Números em C#". Você pode selecionar o link **ramificações e loops** abaixo para iniciar o próximo tutorial interativo, ou pode visitar o [site do .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) para baixar o SDK do .NET Core, criar um projeto em seu computador e manter a codificação. A seção "próximas etapas" leva você de volta para esses tutoriais.


    Você pode saber mais sobre os números em C# nos seguintes artigos:


    - [Tipos numéricos integrais](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Tipos numéricos de ponto flutuante](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Conversões numéricas internas](../../language-reference/builtin-types/numeric-conversions.md)
