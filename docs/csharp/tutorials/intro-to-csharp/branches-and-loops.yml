### YamlMime:Tutorial
title: Saiba mais sobre lógica condicional com instruções branch e loop
metadata:
  title: Tutorial interativo Branches e loops – introdução ao C#
  description: Neste tutorial sobre loops e branches, você usará seu navegador para aprender C# interativamente. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.date: 08/24/2018
  ms.topic: interactive-tutorial
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection.yml
  nextTutorialTitle: A coleção de lista
  ms.openlocfilehash: 596dfeca6e8910bd954b63364af958b7bef1580a
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88267536"
items:
- durationInMinutes: 1
  content: >
    Esse tutorial ensina a escrever código que examina variáveis e muda o caminho de execução com base nessas variáveis. Você usará seu navegador para escrever em C# interativamente e ver os resultados da compilação e da execução de seu código. Este tutorial contém uma série de lições que exploram construções de branches e loops em C#. Estas lições ensinam os princípios básicos da linguagem C#.
- title: Tomar decisões usando a instrução if
  durationInMinutes: 4
  content: >
    Execute o seguinte código na janela interativa. Selecione o botão **entrar no modo de foco** . Em seguida, digite o seguinte bloco de código na janela interativa e selecione **executar**:


    ```csharp

    int a = 5;

    int b = 6;

    if (a + b > 10)
        Console.WriteLine("The answer is greater than 10.");
    ```


    Se você estiver executando isso em seu ambiente, deverá seguir as instruções para a [versão local](branches-and-loops-local.md) em vez disso.


    Modifique a declaração de `b` para que a soma seja inferior a 10:


    ```csharp

    int b = 3;

    ```


    Selecione o botão **executar** novamente. Como a resposta é inferior a 10, nada é impresso. A **condição** que você está testando é falsa. Não há qualquer código para execução, porque você escreveu apenas uma das ramificações possíveis para uma instrução `if`: a ramificação verdadeira.


    > [!TIP]

    > À medida que explora C# (ou qualquer linguagem de programação), você cometerá erros ao escrever o código. O **compilador** encontrará esses erros e os reportará a você. Quando a saída contiver mensagens de erro, analise atentamente o código de exemplo e o código na janela interativa para ver o que deve ser corrigido.

    > Esse exercício ajudará você a conhecer a estrutura do código C#.


    Este primeiro exemplo mostra o poder do `if` e dos tipos boolianos. Um *booliano* é uma variável que pode ter um dos dois valores: `true` ou `false` . C# define um tipo especial, `bool` para variáveis boolianas. A instrução `if` verifica o valor de um `bool`. Quando o valor é `true`, a instrução após `if` é executada. Caso contrário, ele será ignorado.


    Esse processo de verificação de condições e execução de instruções com base nessas condições é poderoso. Vamos explorar mais.
- title: Faça if e else funcionam juntas
  durationInMinutes: 10
  content: "\nPara executar um código diferente nos branches true e false, crie um branch `else` que será executado quando a condição for false. Tente o seguinte:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nA instrução após a palavra-chave `else` é executada somente quando a condição que estiver sendo testada for `false`. A combinação de `if` e `else` com condições boolianas fornece todos os recursos que você precisa.\n\n> [!IMPORTANT]\n> O recuo sob as instruções `if` e `else` é para leitores humanos.\n> A linguagem C# não considera recuos ou espaços em branco como significativos.\n> A instrução após a palavra-chave `if` ou `else` será executada com base na condição. Todos os exemplos neste tutorial seguem uma prática comum para recuar linhas com base no fluxo de controle de instruções.\n\nComo o recuo não é significativo, você precisa usar `{` e `}` para indicar quando você deseja que mais de uma instrução faça parte do bloco que é executado condicionalmente. Os programadores em C# normalmente usam essas chaves em todas as cláusulas `if` e `else`. O exemplo a seguir é o mesmo que você criou. Experimente.\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> No restante deste tutorial, todos os exemplos de código incluem as chaves, seguindo as práticas aceitas.\n\nVocê pode testar condições mais complicadas:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not equal to the second\");\n}\n```\n\nO símbolo `==` testa a *igualdade*. Usar `==` distingue o teste de igualdade de atribuição, que você viu em `a = 5`.\n\nO `&&` representa \"e\". Isso significa que as duas condições devem ser verdadeiras para executar a instrução no branch verdadeiro.  Estes exemplos também mostram que você pode ter várias instruções em cada branch condicional, desde que você coloque-as entre `{` e `}`.\n\nVocê também pode usar `||` representar \"ou\":\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a == b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is equal to the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not equal to the second\");\n}\n```\n\nModifique os valores de `a`, `b` e `c` e alterne entre `&&` e `||` para explorar. Você obterá mais compreensão de como os operadores `&&` e `||` funcionam.\n"
- title: Use loops para repetir operações
  durationInMinutes: 6
  content: >
    Outro conceito importante para criar programas maiores são os **loops**. Você usará loops para repetir as instruções que deseja executar mais de uma vez. Experimente este código na janela interativa:


    ```csharp

    int counter = 0;

    while (counter < 10)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    }

    ```


    A instrução `while` verifica uma condição e executa a instrução após `while`. Ela repetirá a verificação da condição e executará essas instruções até que a condição seja false.


    Há outro operador novo neste exemplo. O `++` após a variável `counter` é o operador **increment**. Ele adiciona 1 ao valor do contador e armazena esse valor na variável do contador.


    > [!IMPORTANT]

    > Verifique se a condição de loop `while` muda para false quando ao executar o código. Caso contrário, crie um **loop infinito**, para que seu programa nunca termine. Não vamos demonstrar isso porque o mecanismo que executa o código ultrapassará o tempo limite, e você não verá uma saída de seu programa.


    O loop `while` testa a condição antes de executar o código seguindo `while`. O loop `do` ... `while` executa o código primeiro e, em seguida, verifica a condição. Ela tem esta aparência:


    ```csharp

    int counter = 0;

    do

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
      counter++;
    } while (counter < 10);

    ```


    Esse loop `do` e o loop `while` anterior funcionam da mesma maneira.


    Vamos passar para a última instrução de loop.
- title: Trabalhar com o loop for
  durationInMinutes: 5
  content: >
    Outra instrução de loop comum que você verá no código C# é o loop `for`. Experimente este código na janela interativa:


    ```csharp

    for(int counter = 0; counter < 10; counter++)

    {
      Console.WriteLine($"Hello World! The counter is {counter}");
    }

    ```


    Ele faz o mesmo trabalho que o loop `while` e o loop `do` que você já usou. A instrução `for` tem três partes que controlam o modo como ela funciona.


    A primeira parte é o **inicializador de para**: `int counter = 0;` declara que `counter` é a variável de loop e define seu valor inicial como `0` .


    A parte intermediária é a **condição**for: `counter < 10` declara que esse `for` loop continua a ser executado, desde que o valor do contador seja menor que 10.


    A parte final é o **para iterador**: `counter++` especifica como modificar a variável de loop depois de executar o bloco após a `for` instrução. Aqui, ela especifica que `counter` deve ser incrementado com 1 sempre que o bloco for executado.


    Experimente você mesmo. Tente o seguinte:


    - Altere o inicializador para iniciar em um valor diferente.

    - Altere a condição para parar em um valor diferente.


    Quando terminar, vamos escrever um código para usar o que você aprendeu.


    Há uma outra instrução de looping que não é abordada neste tutorial: a `foreach` instrução. A `foreach` instrução repete sua instrução para cada item em uma sequência de itens. Ele é usado com mais frequência com *coleções*e, portanto, é abordado no próximo tutorial.
- title: Loops aninhados criados
  durationInMinutes: 10
  content: "Um `while` `do` loop,, ou `for` pode ser aninhado dentro de outro loop para criar uma matriz usando a combinação de cada item no loop externo com cada item no loop interno. Vamos fazer isso para criar um conjunto de pares alfanuméricos para representar linhas e colunas.\n\nUm `for` loop pode gerar as linhas:\n\n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  Console.WriteLine($\"The row is {row}\");\n}\n```\n\nOutro loop pode gerar as colunas:\n\n```csharp\nfor (char column = 'a'; column < 'k'; column++)\n{\n  Console.WriteLine($\"The column is {column}\");\n}\n```\n\nVocê pode aninhar um loop dentro do outro para formar pares:\n  \n```csharp\nfor (int row = 1; row < 11; row++)\n{\n  for (char column = 'a'; column < 'k'; column++)\n  {\n    Console.WriteLine($\"The cell is ({row}, {column})\");\n  }\n}\n```\n\nVocê pode ver que o loop externo é incrementado uma vez para cada execução completa do loop interno. Inverta o aninhamento de linha e coluna e veja as alterações por conta própria.\n"
- title: Combinar branches e loops
  durationInMinutes: 12
  content: >
    Agora que você viu a instrução `if` e as construções de loop na linguagem C#, verifique se você pode escrever o código C# para encontrar a soma de todos os inteiros de 1 a 20 divisíveis por 3.  Veja algumas dicas:


    - O operador `%` retorna o restante de uma operação de divisão.

    - A instrução `if` retorna a condição para ver se um número deve ser parte da soma.

    - O loop `for` pode ajudar você a repetir uma série de etapas para todos os números de 1 a 20.


    Tente você mesmo. Depois verifique como você fez. Como dica, você deve obter 63 como resposta.
- title: Desafio concluído
  durationInMinutes: 1
  content: >
    Você conseguiu algo semelhante a isto?


    ```csharp

    int sum = 0;

    for (int number = 1; number < 21; number++)

    {
      if (number % 3 == 0)
      {
        sum = sum + number;
      }
    }

    Console.WriteLine($"The sum is {sum}");

    ```
- title: Parabéns!
  content: >-
    Você concluiu o tutorial interativo "branches e loops". Você pode selecionar o link de **coleção de lista** abaixo para iniciar o próximo tutorial interativo ou pode visitar o [site do .net](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) para baixar o SDK do .NET Core, criar um projeto em seu computador e manter a codificação. A seção "próximas etapas" leva você de volta para esses tutoriais.


    Você pode saber mais sobre esses conceitos nestes artigos:


    - [Instrução if e else](../../language-reference/keywords/if-else.md)

    - [Instrução while](../../language-reference/keywords/while.md)

    - [Instrução do](../../language-reference/keywords/do.md)

    - [Instrução for](../../language-reference/keywords/for.md)
