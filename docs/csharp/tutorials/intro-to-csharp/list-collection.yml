### YamlMime:Tutorial
title: Saiba como gerenciar coleções de dados usando o tipo de lista genérico
metadata:
  title: Coleções de dados – Tutorial introdução ao C# Interativo
  description: Neste tutorial, você usará seu navegador para aprender C# interativamente. Escreva o código em C# e veja os resultados da compilação e execução de seu código diretamente no navegador.
  audience: Developer
  ms.custom: mvc
  ms.topic: interactive-tutorial
  ms.date: 10/23/2018
  level: Beginner
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: 9618b3f931b8290d7ce696007c3c9603cc30ef6e
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: MT
  ms.contentlocale: pt-BR
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88268108"
items:
- durationInMinutes: 1
  content: >
    Este tutorial ensina C# de maneira interativa, usando seu navegador para escrever código C# e ver os resultados da compilação e da execução de seu código. Ele contém uma série de lições que criam, modificam e exploram coleções e matrizes.
- title: Criar listas
  durationInMinutes: 2
  content: >
    Execute o seguinte código na janela interativa. Selecione o botão **entrar no modo de foco** . Em seguida, digite o seguinte bloco de código na janela interativa (substitua `<name>` pelo seu nome) e selecione **executar**:


    ```csharp

    var names = new List<string> { "<name>", "Ana", "Felipe" };

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Se você estiver executando isso em seu ambiente, deverá seguir as instruções para a [versão local](arrays-and-collections.md) em vez disso.


    Você criou uma lista de cadeias de caracteres, adicionou três nomes a essa lista e imprimiu os nomes em MAIÚSCULAS. Você está usando conceitos que aprendeu em tutoriais anteriores para executar um loop pela lista.


    O código para exibir nomes utiliza o recurso de [interpolação de cadeia de caracteres](../../language-reference/tokens/interpolated.md). Quando você precede um `string` com o caractere `$`, pode inserir o código C# na declaração da cadeia de caracteres. A cadeia de caracteres real substitui esse código C# pelo valor gerado. Neste exemplo, ela substitui o `{name.ToUpper()}` por cada nome, convertido em letras maiúsculas, pois você chamou o método <xref:System.String.ToUpper%2A?displayProperty=nameWithType>.


    Vamos continuar explorando.
- title: Modificar conteúdo da lista
  durationInMinutes: 3
  content: >
    A coleção que você criou usa o tipo <xref:System.Collections.Generic.List%601>. Esse tipo armazena sequências de elementos. Especifique o tipo dos elementos entre os colchetes.


    Um aspecto importante desse tipo <xref:System.Collections.Generic.List%601> é que ele pode aumentar ou diminuir, permitindo que você adicione ou remova elementos. Você pode ver os resultados ao modificar o conteúdo depois que exibiu seu conteúdo. Adicione o código a seguir abaixo do código que você já escreveu (abaixo do loop que imprime o conteúdo):


    ```csharp

    Console.WriteLine();

    names.Add("Maria");

    names.Add("Bill");

    names.Remove("Ana");

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```


    Você adicionou mais dois nomes ao final da lista. Também removeu um. A saída desse bloco de código mostra o conteúdo inicial e, em seguida, imprime uma linha em branco e o novo conteúdo.


    O <xref:System.Collections.Generic.List%601> também permite fazer referência a itens individuais por **índice**. Acesse itens usando os tokens `[` e `]`. Adicione o código a seguir abaixo do código que você já escreveu e teste:


    ```csharp

    Console.WriteLine($"My name is {names[0]}.");

    Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

    ```


    Você não tem permissão para acessar após o fim da lista. Você pode verificar há quanto tempo a lista está usando a propriedade <xref:System.Collections.Generic.List%601.Count%2A>. Adicione o seguinte código para testar:


    ```csharp

    Console.WriteLine($"The list has {names.Count} people in it");

    ```


    Selecione **executar** novamente para ver os resultados. Em C#, os índices começam com 0, portanto, o maior índice válido é uma unidade a menos do que o número de itens na lista.
- title: Pesquisar e classificar listas
  durationInMinutes: 5
  content: >
    Nossos exemplos usam listas relativamente pequenas, mas seus aplicativos podem criar listas com muitos outros elementos, chegando, às vezes, a milhares. Para localizar elementos nessas coleções maiores, pesquise por itens diferentes na lista. O método <xref:System.Collections.Generic.List%601.IndexOf%2A> procura um item e retorna o índice do item. Se o item não estiver na lista, `IndexOf` retornará `-1` . Experimente para ver como funciona.  Adicione o código a seguir abaixo do código que você escreveu até o momento:


    ```csharp

    var index = names.IndexOf("Felipe");

    if (index != -1)
      Console.WriteLine($"The name {names[index]} is at index {index}");

    var notFound = names.IndexOf("Not Found");
      Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
    ```


    Talvez você não saiba se um item está na lista, portanto, sempre verifique o índice retornado por <xref:System.Collections.Generic.List%601.IndexOf%2A>. Se for -1, o item não terá sido encontrado.


    Os itens em sua lista também podem ser classificados. O <xref:System.Collections.Generic.List%601.Sort%2A> método classifica todos os itens na lista em sua ordem normal (em ordem alfabética para cadeias de caracteres). Adicione este código e execute novamente:


    ```csharp

    names.Sort();

    foreach (var name in names)

    {
      Console.WriteLine($"Hello {name.ToUpper()}!");
    }

    ```
- title: Listas de outros tipos
  durationInMinutes: 5
  content: >
    Você usou o tipo `string` nas listas até o momento. Vamos fazer <xref:System.Collections.Generic.List%601> usar um tipo diferente. Vamos compilar um conjunto de números. Exclua o código que você escreveu até o momento e substitua-o pelo seguinte código:


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};

    ```


    Isso cria uma lista de números inteiros e define os primeiros dois inteiros como o valor 1. A *Sequência de Fibonacci*, uma sequência de números, começa com dois 1s. Cada número Fibonacci seguinte é encontrado considerando a soma dos dois números anteriores. Adicione este código:


    ```csharp

    var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];

    var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];


    fibonacciNumbers.Add(previous + previous2);


    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Pressione **Executar** para ver os resultados;
- title: Desafio
  durationInMinutes: 10
  content: >
    Veja se você consegue combinar alguns dos conceitos desta lição e de lições anteriores. Expanda o que você compilou até o momento com números Fibonacci. Tente escrever o código para gerar os 20 primeiros números na sequência. (Como uma dica, o vigésimo número Fibonacci é 6765.)
- title: Desafio concluído
  durationInMinutes: 3
  content: >
    Você conseguiu algo semelhante a isto?


    ```csharp

    var fibonacciNumbers = new List<int> {1, 1};


    while (fibonacciNumbers.Count < 20)

    {
        var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
        var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

        fibonacciNumbers.Add(previous + previous2);
    }

    foreach(var item in fibonacciNumbers)
        Console.WriteLine(item);
    ```


    Com cada iteração do loop, você está pegando os últimos dois inteiros na lista, somando-os e adicionando esse valor à lista. O loop será repetido até que você tenha adicionado 20 itens à lista.
- content: >-
    Você concluiu o tutorial interativo de lista. Este é o tutorial interativo final de introdução ao C#. Visite o [site do .NET](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro) para baixar o SDK do .NET Core, criar um projeto em seu computador e continuar criando códigos. A seção "próximas etapas" leva você de volta para esses tutoriais.


    Saiba mais sobre as [Coleções de .NET](../../../standard/collections/index.md) nos artigos a seguir:

    - [Selecionar um tipo de coleção](../../../standard/collections/selecting-a-collection-class.md)

    - [Tipos de coleção usados com frequência](../../../standard/collections/commonly-used-collection-types.md)

    - [Quando usar coleções genéricas](../../../standard/collections/when-to-use-generic-collections.md)
